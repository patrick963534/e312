****************************************************************************************************

sl_object_t 

    - serial_check_id
        use to check an instance is the type that inheriate from sl_object_t.

    - valid_check_id
        check whether an instance is deleted.

    - heap_check_id
        check whether an instance is in heap or stack.

****************************************************************************************************

sl_string_t support usage:

    -. 

****************************************************************************************************

libsl project folder tree

    - libsl
        .gitignore

        .git/

        deps/
            libsl/
                include/
                    sl/
                src/

            libc/
                include/
                    sl/
                src/
                lib/
                bin/

            pthread/
                include/
                    sl/
                lib/
                    bsd/ linux/ windows/
                bin/
                    bsd/ linux/ windows/
                
            opengl/
                include/
                    sl/
                bin/
                    bsd/ linux/ windows/
                lib/
                    bsd/ linux/ windows/

            openal/
                include/
                    sl/
                bin/
                    bsd/ linux/ windows/
                lib/
                    bsd/ linux/ windows/ 

        project/
            libsl_cunit/
            libc_cunit/
            gui_demo/
            game_demo/
            sl_minibox/
            tretras/
            snake/

****************************************************************************************************

ABOUT libsl 

    - Try to build a good CROSS-PLATFORM application framework.
        ~. GUI lib. (base on opengl, vs GTK/QT)
        ~. 3D engine.
        ~. 2D engine.
        ~. Network.
        ~. Audio.
        ~. Mutlithread.

    - 3rd library (try to use as little as possible 3rd LIBs, and real GOOD at CROSS-Platform)
        ~. opengl
        ~. openal
        ~. glut
        ~. pthread
        ~. libc
        ~. system lib (try to use as little as possible except have to use it.)
            #. timer
            #. sleep
            #. socket
            #. folder/path functions 

    - only 4 basic type:
        ~. typedef int      sl_i;   // for int.
        ~. typedef char     sl_c;   // for char.
        ~. typedef int      sl_b;   // for bool.
        ~. typedef float    sl_f;   // for float. (don't use double.)

    - REMARK:
        ~. I want these whole thing can be built to static lib. (I remember the 3D tool 'blender' also use static build.)
        ~. The whole libc use UTF-8.
        ~. libc only used in libsl, and in libsl, try to use as little as possible. ex: sl_fopen only used in sl_file_t types.
        ~. try to make every instance of sl_object in heap.

        ~. For data, I can use sl_c type.
        ~. For string, I need to use custom type sl_string_t instead.

        ~. 2 thing:
            #. Support stack sl_string? (-- Actually, const string isn't used often, just temperary, so try to use heap sl_string instead, that doesn't cause much code.)
                    parse_file(&sl_string_const("data.ext"));    
                    
            #. Find a way to avoid "Memory out of bound" usage. For example: (Usually, this is caused by string modification or data writing. For string modification I can use sl_string to solve it, to do checking for every modification. For data writing, I should use sl_arrry or sl_list to solve it, to do checking for every writing. The indexing problem. (The C# way.)
                    char *str = malloc(8);
                    str[8] = '\0'; // out of bound.
                    free(str);     // might will get exception, and kills me.
        
